import * as Data from "@effect/data/Data";
import * as Debug from "@effect/data/Debug";
import * as completedRequestMap from "@effect/io/internal_effect_untraced/completedRequestMap";
import * as core from "@effect/io/internal_effect_untraced/core";
/** @internal */
const RequestSymbolKey = "@effect/io/Request";
/** @internal */
export const RequestTypeId = /*#__PURE__*/Symbol.for(RequestSymbolKey);
/** @internal */
const requestVariance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
export const isRequest = u => typeof u === "object" && u != null && RequestTypeId in u;
/** @internal */
export const of = () => args =>
// @ts-expect-error
Data.struct({
  [RequestTypeId]: requestVariance,
  ...args
});
/** @internal */
export const tagged = tag => args =>
// @ts-expect-error
Data.struct({
  [RequestTypeId]: requestVariance,
  _tag: tag,
  ...args
});
/** @internal */
export const complete = /*#__PURE__*/Debug.dualWithTrace(2, trace => (self, result) => core.fiberRefGetWith(completedRequestMap.currentRequestMap, map => core.sync(() => {
  if (map.has(self)) {
    const entry = map.get(self);
    if (!entry.state.completed) {
      entry.state.completed = true;
      core.deferredUnsafeDone(entry.result, result);
    }
  }
})).traced(trace));
/** @internal */
export const completeEffect = /*#__PURE__*/Debug.dualWithTrace(2, trace => (self, effect) => core.matchEffect(effect, error => complete(self, core.exitFail(error)), value => complete(self, core.exitSucceed(value))).traced(trace));
/** @internal */
export const fail = /*#__PURE__*/Debug.dualWithTrace(2, trace => (self, error) => complete(self, core.exitFail(error)).traced(trace));
/** @internal */
export const succeed = /*#__PURE__*/Debug.dualWithTrace(2, trace => (self, value) => complete(self, core.exitSucceed(value)).traced(trace));
/** @internal */
export class Listeners {
  constructor() {
    this.count = 0;
    this.observers = new Set();
  }
  addObserver(f) {
    this.observers.add(f);
  }
  removeObserver(f) {
    this.observers.delete(f);
  }
  increment() {
    this.count++;
    this.observers.forEach(f => f(this.count));
  }
  decrement() {
    this.count--;
    this.observers.forEach(f => f(this.count));
  }
}
/**
 * @internal
 */
export const filterOutCompleted = requests => core.fiberRefGetWith(completedRequestMap.currentRequestMap, map => core.succeed(requests.filter(request => !(map.get(request)?.state.completed === true))));
//# sourceMappingURL=request.mjs.map