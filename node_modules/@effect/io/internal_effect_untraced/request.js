"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tagged = exports.succeed = exports.of = exports.isRequest = exports.filterOutCompleted = exports.fail = exports.completeEffect = exports.complete = exports.RequestTypeId = exports.Listeners = void 0;
var Data = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Data"));
var Debug = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Debug"));
var completedRequestMap = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/internal_effect_untraced/completedRequestMap"));
var core = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/internal_effect_untraced/core"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** @internal */
const RequestSymbolKey = "@effect/io/Request";
/** @internal */
const RequestTypeId = /*#__PURE__*/Symbol.for(RequestSymbolKey);
/** @internal */
exports.RequestTypeId = RequestTypeId;
const requestVariance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
const isRequest = u => typeof u === "object" && u != null && RequestTypeId in u;
/** @internal */
exports.isRequest = isRequest;
const of = () => args =>
// @ts-expect-error
Data.struct({
  [RequestTypeId]: requestVariance,
  ...args
});
/** @internal */
exports.of = of;
const tagged = tag => args =>
// @ts-expect-error
Data.struct({
  [RequestTypeId]: requestVariance,
  _tag: tag,
  ...args
});
/** @internal */
exports.tagged = tagged;
const complete = /*#__PURE__*/Debug.dualWithTrace(2, trace => (self, result) => core.fiberRefGetWith(completedRequestMap.currentRequestMap, map => core.sync(() => {
  if (map.has(self)) {
    const entry = map.get(self);
    if (!entry.state.completed) {
      entry.state.completed = true;
      core.deferredUnsafeDone(entry.result, result);
    }
  }
})).traced(trace));
/** @internal */
exports.complete = complete;
const completeEffect = /*#__PURE__*/Debug.dualWithTrace(2, trace => (self, effect) => core.matchEffect(effect, error => complete(self, core.exitFail(error)), value => complete(self, core.exitSucceed(value))).traced(trace));
/** @internal */
exports.completeEffect = completeEffect;
const fail = /*#__PURE__*/Debug.dualWithTrace(2, trace => (self, error) => complete(self, core.exitFail(error)).traced(trace));
/** @internal */
exports.fail = fail;
const succeed = /*#__PURE__*/Debug.dualWithTrace(2, trace => (self, value) => complete(self, core.exitSucceed(value)).traced(trace));
/** @internal */
exports.succeed = succeed;
class Listeners {
  constructor() {
    this.count = 0;
    this.observers = new Set();
  }
  addObserver(f) {
    this.observers.add(f);
  }
  removeObserver(f) {
    this.observers.delete(f);
  }
  increment() {
    this.count++;
    this.observers.forEach(f => f(this.count));
  }
  decrement() {
    this.count--;
    this.observers.forEach(f => f(this.count));
  }
}
/**
 * @internal
 */
exports.Listeners = Listeners;
const filterOutCompleted = requests => core.fiberRefGetWith(completedRequestMap.currentRequestMap, map => core.succeed(requests.filter(request => !(map.get(request)?.state.completed === true))));
exports.filterOutCompleted = filterOutCompleted;
//# sourceMappingURL=request.js.map